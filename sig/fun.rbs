module Fun
  def self.eq?: [T < Comparable, U < Comparable](T, U) -> bool

  def self.ne?: [T < Comparable, U < Comparable](T, U) -> bool

  def self.gt?: [T < Comparable, U < Comparable](T, U) -> bool

  def self.ge?: [T < Comparable, U < Comparable](T, U) -> bool

  def self.lt?: [T < Comparable, U < Comparable](T, U) -> bool

  def self.le?: [T < Comparable, U < Comparable](T, U) -> bool

  def self.id: [T](T) -> T

  def self.const: [T](T, untyped) -> T

  def self.pipe: [T, R](T, *^(untyped) -> untyped) -> R

  def self.compose: [T, R](T, *^(untyped) -> untyped) -> R

  def self.not?: (^(*untyped, **untyped) -> bool, *untyped, **untyped) -> bool

  def self.nil_or: [T](T?, T) -> T

  def self.nil_or_else: [T](T?, ^-> T) -> T

  def self.not_nil_or: [T](T?, T) -> T

  def self.not_nil_or_else: [T](T?, ^-> T) -> T

  def self.not_nil_map: [T](nil, ^(T) -> untyped) -> nil
    | [T, R](T, ^(T) -> R) -> R

  def self.add: [T](T, T) -> T

  def self.minus: [T](T, T) -> T

  def self.mul: [T](T, T) -> T

  def self.div: [T](T, T) -> T

  def self.mod: (Numeric, Numeric) -> Numeric

  def self.flip: [T, U, R](U, T, ^(T, U) -> R) -> R

  def self.all?: [T](T, *^(T) -> bool) -> bool
    | [T](^(T) -> bool, *T) -> bool

  def self.any?: [T](T, *^(T) -> bool) -> bool
    | [T](^(T) -> bool, *T) -> bool

  def self.clamp: [T < Comparable](T, T, T) -> T

  def self.cond: [T, R](Array[[^(T) -> bool, ^(T) -> R]], *T, **T) -> R

  def self.curry: [R](^(*untyped, **Hash[Symbol, untyped]) -> R) -> ^(*untyped, **untyped) -> (R | Proc)

  def self.dec: (Numeric) -> Numeric

  def self.inc: (Numeric) -> Numeric

  def self.desc: [T < Comparable](Array[T]){(T) -> Comparable} -> Array[T]
    | [T < Comparable](Hash[Symbol, T]){(Symbol, T) -> Comparable} -> Hash[Symbol, T]

  def self.asc: [T < Comparable](Array[T]){(T) -> Comparable} -> Array[T]
    | [T < Comparable](Hash[Symbol, T]){(Symbol, T) -> Comparable} -> Hash[Symbol, T]

  def self.to_sym: (String) -> Symbol

  def self.diff: [T](Array[T], Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], Hash[Symbol, T]) -> Hash[Symbol, T]

  def self.intersect: [T](Array[T], Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], Hash[Symbol, T]) -> Hash[Symbol, T]

  def self.non_intersect: [T](Array[T], Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], Hash[Symbol, T]) -> Hash[Symbol, T]

  def self.union: [T](Array[T], Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], Hash[Symbol, T]) -> Hash[Symbol, T]

  def self.empty: (Array[untyped]) -> Array[untyped]
    | (Hash[Symbol, untyped]) -> Hash[Symbol, untyped]
    | (String) -> String
    | (untyped) -> nil

  def self.mean: (*Numeric) -> Numeric

  def self.median: (*Numeric) -> Numeric

  def self.memorize_with: [R](^(*untyped, **untyped) -> String, ^(*untyped, **untyped) -> R) -> R

  def self.negate: (Numeric) -> Numeric
end
