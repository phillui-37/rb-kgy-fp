type ph = Special::PlaceHolder
type opt = Special::Optional

module CurryFun

  def self.eq?: [T, U](T, U) -> bool
    | [T, U](T, ph?) -> ^(U) -> bool

  def self.ne?: [T, U](T, U) -> bool
    | [T, U](T, ph?) -> ^(U) -> bool

  def self.gt?: [T, U](T, U) -> bool
    | [T, U](T, ph?) -> ^(U) -> bool

  def self.ge?: [T, U](T, U) -> bool
    | [T, U](T, ph?) -> ^(U) -> bool

  def self.lt?: [T, U](T, U) -> bool
    | [T, U](T, ph?) -> ^(U) -> bool

  def self.le?: [T, U](T, U) -> bool
    | [T, U](T, ph?) -> ^(U) -> bool

  def self.const: [T](T, untyped) -> T
    | [T](T, ph?) -> ^(untyped) -> T

  def self.pipe: [R](*^(untyped) -> untyped) -> ^(untyped) -> R

  def self.compose: [R](*^(untyped) -> untyped) -> ^(untyped) -> R

  def self.not?: [R]{ (*untyped, **untyped) -> R } -> ^(*untyped, **untyped) -> R

  def self.nil_or: [T](T, T | nil) -> T
    | [T](T, ph?) -> ^(T) -> T

  def self.nil_or_else: [T](get_fallback: ^() -> T, value: T | nil) -> T
    | [T](get_fallback: opt?, value: T | nil) { () -> T } -> T
    | [T](get_fallback: ^() -> T, value: ph?) -> ^(T) -> T
    | [T](get_fallback: opt?, value: ph?) { () -> T } -> ^(T) -> T

  def self.not_nil_or: [T](T, T | nil) -> T
    | [T](T, ph?) -> ^(T) -> T

  def self.not_nil_or_else: [T](get_fallback: ^() -> T, value: T | nil) -> T
    | [T](get_fallback: ^() -> T, value: ph?) -> ^(T) -> T
    | [T](get_fallback: opt?, value: T | nil) { () -> T } -> T
    | [T](get_fallback: opt?, value: ph?) { () -> T } -> ^(T) -> T

  def self.not_nil_map: [T, R](mapper: (^(T) -> R | Symbol), value: T | nil) -> (R | nil)
    | [T, R](mapper: (^(T) -> R | Symbol), value: ph?) -> ^(T | nil) -> (R | nil)
    | [T, R](mapper: opt?, value: T | nil) { (T) -> R } -> (R | nil)
    | [T, R](mapper: opt?, value: ph?) { (T) -> R } -> ^(T | nil) -> (R | nil)

  def self.add: [T < Comparable](T, T) -> T
    | [T < Comparable](T, ph?) -> ^(T) -> T

  def self.minus: [T < Comparable](T, T) -> T
    | [T < Comparable](T, ph?) -> ^(T) -> T

  def self.mul: [T < Comparable](T, T) -> T
    | [T < Comparable](T, ph?) -> ^(T) -> T

  def self.div: [T < Comparable](T, T) -> T
    | [T < Comparable](T, ph?) -> ^(T) -> T

  def self.mod: (Numeric, Numeric) -> Numeric
    | (Numeric, ph?) -> ^(Numeric) -> Numeric

  def self.flip: [T, U, R](U, T) { (T, U) -> R } -> R
    | [T, U, R](U, ph?) -> ^(T) { (T, U) -> R } -> R
    | [T, U, R](U, ph?) -> ^(T) -> ^() { (T, U) -> R } -> R
    | [T, U, R](U, ph?) { (T, U) -> R } -> ^(T) -> R
    | [T, U, R](U, T) -> ^() { (T, U) -> R } -> R

  def self.all?: [T](fn: (^(T) -> bool | Symbol), args: Array[T]) -> bool
    | [T](fn: opt?, args: Array[T]) { (T) -> bool } -> bool
    | [T](fn: (^(T) -> bool | Symbol), args: ph?) -> ^(*T) -> bool
    | [T](fn: opt?, args: ph?) { (T) -> bool } -> ^(*T) -> bool

  def self.any?: [T](fn: (^(T) -> bool | Symbol), args: Array[T]) -> bool
    | [T](fn: opt?, args: Array[T]) { (T) -> bool } -> bool
    | [T](fn: (^(T) -> bool | Symbol), args: ph?) -> ^(*T) -> bool
    | [T](fn: opt?, args: ph?) { (T) -> bool } -> ^(*T) -> bool

  def self.and?: (bool, bool) -> bool
    | (bool, ph?) -> ^(bool) -> bool

  def self.or?: (bool, bool) -> bool
    | (bool, ph?) -> ^(bool) -> bool

  def self.xor?: (bool, bool) -> bool
    | (bool, ph?) -> ^(bool) -> bool

  def self.clamp: [T < Comparable](T, T, T) -> T
    | [T < Comparable](T, T, ph?) -> ^(T) -> T
    | [T < Comparable](T, ph?, ph?) -> ^(T, T) -> T
    | [T < Comparable](T, ph?, ph?) -> ^(T, ph?) -> ^(T) -> T

  def self.cond: [T, R](Array[[^(T) -> bool, ^(T) -> R]]) -> ^(*T, **T) -> R

  def self.desc: [T < Comparable]{ (T) -> Comparable } -> ^(Array[T]) -> Array[T]
    | [T < Comparable]{ (Symbol, T) -> Comparable } -> ^(Hash[Symbol, T]) -> Hash[Symbol, T]

  def self.asc: [T < Comparable]{ (T) -> Comparable } -> ^(Array[T]) -> Array[T]
    | [T < Comparable]{ (Symbol, T) -> Comparable } -> ^(Hash[Symbol, T]) -> Hash[Symbol, T]

  def self.diff: [T](Array[T], Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], Hash[Symbol, T]) -> Hash[Symbol, T]
    | [T](Array[T], ph?) -> ^(Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], ph?) -> ^(Hash[Symbol, T]) -> Hash[Symbol, T]

  def self.intersect: [T](Array[T], Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], Hash[Symbol, T]) -> Hash[Symbol, T]
    | [T](Array[T], ph?) -> ^(Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], ph?) -> ^(Hash[Symbol, T]) -> Hash[Symbol, T]

  def self.non_intersect: [T](Array[T], Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], Hash[Symbol, T]) -> Hash[Symbol, T]
    | [T](Array[T], ph?) -> ^(Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], ph?) -> ^(Hash[Symbol, T]) -> Hash[Symbol, T]

  def self.union: [T](Array[T], Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], Hash[Symbol, T]) -> Hash[Symbol, T]
    | [T](Array[T], ph?) -> ^(Array[T]) -> Array[T]
    | [T](Hash[Symbol, T], ph?) -> ^(Hash[Symbol, T]) -> Hash[Symbol, T]
end